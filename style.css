:root { --bg-color: #1a1d24; --text-color: #e0e0e0; --accent-start: #ff8c00; --accent-end: #c7006e; --box-color: #2a2d35; --box-border: rgba(255,255,255,0.1); --gold-color: #FFD700; }
* { margin: 0; padding: 0; box-sizing: border-box; }
body { font-family: 'Poppins', sans-serif; background-color: var(--bg-color); color: var(--text-color); -webkit-font-smoothing: antialiased; }
.rules-overlay, .status-upload-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(26,29,36,0.7);backdrop-filter:blur(8px);z-index:3000;display:flex;justify-content:center;align-items:center;padding:20px;opacity:1;transition:opacity .4s ease-out}.rules-overlay.hidden, .status-upload-overlay.hidden{opacity:0;pointer-events:none}.rules-content, .status-upload-content{background-color:rgba(42,42,50,0.9);border:1px solid rgba(255,255,255,0.1);border-radius:20px;box-shadow:0 10px 30px rgba(0,0,0,0.3);max-width:400px;width:100%;padding:30px;text-align:left;color:var(--text-color);animation:modal-enter .4s ease-out forwards}@keyframes modal-enter{from{opacity:0;transform:scale(.9)}to{opacity:1;transform:scale(1)}}.rules-title, .status-upload-title{font-weight:700;color:var(--text-color);font-size:1.8rem;text-align:center;margin-bottom:20px;letter-spacing:1px}.rules-list{display:flex;flex-direction:column;gap:15px;margin-bottom:30px}.rule-item{display:flex;align-items:flex-start;gap:15px;font-size:.95rem;line-height:1.5}.rule-item span{font-size:1.2rem;line-height:1.5;color:var(--accent-start)}.accept-btn, .status-btn{display:block;width:100%;padding:15px;font-weight:700;font-size:1.2rem;letter-spacing:2px;color:#fff;background-image:linear-gradient(90deg, var(--accent-start), var(--accent-end));border:none;border-radius:10px;cursor:pointer;box-shadow:0 5px 20px rgba(255,140,0,0.3);transition:all .2s ease; text-align: center; text-decoration: none;}.accept-btn:hover, .status-btn:hover{transform:scale(1.02);box-shadow:0 8px 25px rgba(255,140,0,0.4)}
.status-upload-instructions { text-align: center; margin-bottom: 15px; opacity: 0.8; }
.status-image { width: 100%; max-width: 250px; margin: 0 auto 15px; display: block; border-radius: 10px; }
#upload-error { color: #ff4d4d; text-align: center; margin-top: 10px; font-weight: 500; }
.app-scene { width: 100%; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: space-between; text-align: center; opacity: 1; padding: 20px; }
.app-scene.hidden { display: none !important; }
@keyframes fade-in{from{opacity:0}to{opacity:1}}
.main-header, .scene-container, .main-footer { width: 100%; }
.main-header { padding-top: 5vh; flex-shrink: 0; position: relative; }
.main-footer { height: 5vh; flex-shrink: 0; }
.scene-container { display: flex; justify-content: center; align-items: center; flex-grow: 1; }
.main-title { font-size: 4rem; font-weight: 800; text-transform: uppercase; letter-spacing: 2px; background: linear-gradient(90deg, var(--accent-start), var(--accent-end)); -webkit-background-clip: text; -webkit-text-fill-color: transparent; white-space: nowrap; }
.sub-title { font-size: 1rem; font-weight: 300; opacity: 0.7; letter-spacing: 1px; margin-top: -10px; }
.win-condition { display: inline-block; background: rgba(0,0,0,0.2); border: 1px solid var(--box-border); padding: 8px 15px; border-radius: 50px; font-size: 0.9rem; font-weight: 500; margin-top: 25px; }
.win-condition span { font-size: 1.2rem; vertical-align: middle; margin-right: 5px; }
.viewers-count { position: absolute; top: 0; right: 0; background: rgba(0,0,0,0.2); padding: 5px 10px; border-radius: 50px; font-size: 0.8rem; display: flex; align-items: center; gap: 5px; opacity: 0.7; }
.game-grid { display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; perspective: 1000px; width: 100%; max-width: 330px; }
.game-grid.hidden { display: none !important; }
.game-box { width: 100%; padding-bottom: 100%; position: relative; cursor: pointer; transform-style: preserve-3d; transition: transform 0.6s cubic-bezier(0.25, 1, 0.5, 1); }
.game-box .box-face { position: absolute; width: 100%; height: 100%; backface-visibility: hidden; display: flex; justify-content: center; align-items: center; border-radius: 15px; font-size: 3rem; box-shadow: inset 0 0 15px rgba(0,0,0,0.2); }
.box-front { background: var(--box-color); border: 1px solid var(--box-border); }
.box-back { background: #1f2229; transform: rotateY(180deg); }
.game-box.is-flipped, .game-box.is-disabled { pointer-events: none; }
.game-box.is-flipped { transform: rotateY(180deg); }
.loading-spinner { border: 4px solid rgba(255,255,255,0.2); border-left-color: var(--accent-start); border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; }
@keyframes spin { to { transform: rotate(360deg); } }
.result-overlay{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,.85);z-index:3000;display:flex;justify-content:center;align-items:center;opacity:0;pointer-events:none;transition:opacity .4s ease;backdrop-filter:blur(5px)}.result-overlay.visible{opacity:1;pointer-events:all}.result-content{display:flex;flex-direction:column;align-items:center;gap:20px}#result-image{max-width:80vw;max-height:70vh;animation:result-pop-in .4s ease-out}@keyframes result-pop-in{from{transform:scale(.8);opacity:0}to{transform:scale(1)}}.winner-code-container{text-align:center;background:rgba(0,0,0,.5);padding:10px 20px;border-radius:10px;border:1px solid var(--gold-color)}.winner-code-container p{font-size:.8rem;letter-spacing:1px;opacity:.8}.winner-code{font-family:monospace;font-size:1.8rem;font-weight:700;color:var(--gold-color);text-shadow:0 0 10px var(--gold-color);letter-spacing:2px}.hidden{display:none!important}
.cooldown-message{text-align:center;animation:fade-in .5s ease-out forwards}.cooldown-message.hidden{display:none}.cooldown-icon{font-size:4rem;color:var(--accent-start);margin-bottom:10px}.cooldown-message h2{font-family:'Poppins',sans-serif;font-weight:700;font-size:1.5rem;letter-spacing:1px;color:var(--text-color)}.timer-text{font-size:3rem;font-weight:800;color:var(--text-color);letter-spacing:2px}```

### `script (2).js`

```javascript
// --- The "Legendary" Engine --- //

document.addEventListener('DOMContentLoaded', () => {
    const BACKEND_URL = 'https://shop-op4l.onrender.com';

    // Get all elements that exist on the page from the start
    const rulesOverlay = document.getElementById('rules-overlay');
    const acceptBtn = document.getElementById('accept-rules-btn');
    const statusUploadOverlay = document.getElementById('status-upload-overlay');
    const screenshotUploadBtn = document.getElementById('upload-screenshot-btn');
    const screenshotUploadInput = document.getElementById('screenshot-upload');
    const uploadError = document.getElementById('upload-error');
    const mainApp = document.getElementById('main-app');
    const resultOverlay = document.getElementById('result-overlay');
    const resultImage = document.getElementById('result-image');
    const winnerCodeContainer = document.getElementById('winner-code-container');
    const winnerCodeEl = document.getElementById('winner-code');
    const gameGrid = document.getElementById('game-grid');
    const cooldownMessage = document.getElementById('cooldown-message');
    const viewersCountEl = document.getElementById('viewers-count');
    const gameMusic = document.getElementById('game-music');
    const buttonSound = document.getElementById('button-sound');

    let deviceId = null;

    function playSound(type) { try { if (type === 'game') { if (gameMusic) { gameMusic.volume = 0.3; gameMusic.play().catch(e => {}); } } else { if (buttonSound) { buttonSound.currentTime = 0; buttonSound.volume = 0.5; buttonSound.play().catch(e => {}); } } } catch (e) {} }

    function getDeviceId() {
        if (deviceId) return deviceId;
        let id = localStorage.getItem('cafeRiteDeviceId');
        if (!id) {
            id = 'device-' + Date.now() + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('cafeRiteDeviceId', id);
        }
        deviceId = id;
        return deviceId;
    }

    async function initializeGame() {
        mainApp.classList.remove('hidden');
        playSound('game');
        updateViewersCount();

        const lastPlayed = localStorage.getItem(`cafeRiteLastPlayed_${getDeviceId()}`);
        if (lastPlayed) {
            const timeSince = Date.now() - parseInt(lastPlayed, 10);
            const cooldown = 24 * 60 * 60 * 1000;
            if (timeSince < cooldown) {
                showCooldownTimer(cooldown - timeSince);
                return;
            }
        }
        createGameGrid();
    }

    function createGameGrid() {
        gameGrid.classList.remove('hidden');
        cooldownMessage.classList.add('hidden');
        gameGrid.innerHTML = '';
        for (let i = 0; i < 9; i++) {
            const box = document.createElement('div');
            box.className = 'game-box';
            box.dataset.index = i;
            box.addEventListener('click', handleBoxClick, { once: true });
            box.innerHTML = `<div class="box-face box-front"></div><div class="box-face box-back"></div>`;
            gameGrid.appendChild(box);
        }
    }

    async function handleBoxClick(event) {
        playSound('button');
        const clickedBox = event.currentTarget;
        const boxIndex = clickedBox.dataset.index;
        document.querySelectorAll('.game-box').forEach(b => b.classList.add('is-disabled'));
        clickedBox.querySelector('.box-front').innerHTML = '<div class="loading-spinner"></div>';

        try {
            const response = await fetch(`${BACKEND_URL}/play`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ deviceId: getDeviceId(), boxIndex: parseInt(boxIndex) })
            });
            if (response.status === 429) {
                const data = await response.json();
                showCooldownTimer(data.cooldownEnd - Date.now());
                return;
            }
            if (!response.ok) throw new Error(`Server Error: ${response.status}`);
            const result = await response.json();
            playAnimations(clickedBox, result);
        } catch (error) {
            console.error("CRITICAL: Game server connection failed.", error);
            alert("Sorry, the game server is busy. Please refresh and try again.");
            document.querySelectorAll('.game-box').forEach(b => {
                b.classList.remove('is-disabled');
                b.querySelector('.box-front').innerHTML = '';
            });
        }
    }

    function playAnimations(clickedBox, result) {
        populateAllBoxes(result.items);
        clickedBox.querySelector('.box-front').innerHTML = '';
        clickedBox.classList.add('is-flipped');
        setTimeout(() => { showResult(result); }, 800);
    }

    function populateAllBoxes(items) { document.querySelectorAll('.game-box .box-back').forEach((back, i) => { if(back) back.innerHTML = items[i]; }); }

    function showResult(result) {
        setDailyLock();
        resultImage.src = result.win ? 'lucky.png' : 'unlucky.png';
        if (result.win) {
            winnerCodeEl.textContent = result.winnerCode;
            winnerCodeContainer.classList.remove('hidden');
            const expiryTime = Date.now() + 20 * 60 * 1000;
            localStorage.setItem('cafeRiteWinnerExpiry', expiryTime);
            localStorage.setItem('cafeRiteWinnerCode', result.winnerCode);
        } else {
            winnerCodeContainer.classList.add('hidden');
            setTimeout(() => {
                resultOverlay.classList.remove('visible');
                setTimeout(() => {
                    document.querySelectorAll('.game-box').forEach(box => box.classList.add('is-flipped'));
                    setTimeout(() => { showCooldownTimer(24 * 60 * 60 * 1000); }, 7000);
                }, 100);
            }, 5000);
        }
        resultOverlay.classList.remove('hidden');
        setTimeout(() => resultOverlay.classList.add('visible'), 10);
    }

    function showWinnerScreenFromStorage() {
        mainApp.classList.add('hidden');
        resultImage.src = 'lucky.png';
        winnerCodeEl.textContent = localStorage.getItem('cafeRiteWinnerCode');
        winnerCodeContainer.classList.remove('hidden');
        resultOverlay.classList.remove('hidden');
        resultOverlay.classList.add('visible');
    }

    function setDailyLock() { localStorage.setItem(`cafeRiteLastPlayed_${getDeviceId()}`, Date.now()); }

    function showCooldownTimer(msLeft) {
        gameGrid.classList.add('hidden');
        cooldownMessage.classList.remove('hidden');
        const timerText = document.getElementById('timer-text');

        if (!document.querySelector('.cooldown-note')) {
            const note = document.createElement('p');
            note.className = 'cooldown-note';
            note.innerHTML = `
                <b>Note:</b><br>
                Only Google Chrome users are eligible for this offer. ✅<br>
                For security, Incognito tabs and other browsers are not eligible for prizes. 🛡️<br>
                Try once a day using our Cafe Rite scanner! 😀<br>
                Have a nice day! 😊
            `;
            cooldownMessage.appendChild(note);
        }

        if (!timerText) return;

        let interval = setInterval(() => {
            msLeft -= 1000;
            if (msLeft <= 0) {
                clearInterval(interval);
                localStorage.removeItem(`cafeRiteLastPlayed_${getDeviceId()}`);
                window.location.reload();
                return;
            }
            const h = Math.floor(msLeft / 3600000);
            const m = Math.floor((msLeft % 3600000) / 60000);
            const s = Math.floor((msLeft % 60000) / 1000);
            timerText.textContent = `${pad(h)}:${pad(m)}:${pad(s)}`;
        }, 1000);
    }

    function pad(num) { return num < 10 ? '0' + num : num; }

    async function updateViewersCount() {
        if (!viewersCountEl) return;
        try {
            const response = await fetch(`${BACKEND_URL}/viewers`);
            if (!response.ok) return;
            const data = await response.json();
            viewersCountEl.querySelector('span').textContent = data.count;
            viewersCountEl.classList.remove('hidden');
        } catch (error) { console.log("Could not fetch viewer count."); }
    }

    async function verifyScreenshot(file) {
        screenshotUploadBtn.textContent = 'VERIFYING...';
        screenshotUploadBtn.disabled = true;
        uploadError.classList.add('hidden');

        try {
            const { data: { text } } = await Tesseract.recognize(file, 'eng');
            const lowerCaseText = text.toLowerCase();
            if (lowerCaseText.includes('my status') && lowerCaseText.includes('kattigenahalli')) {
                statusUploadOverlay.classList.add('hidden');
                initializeGame();
            } else {
                uploadError.textContent = 'Verification Failed. Please upload the correct screenshot.';
                uploadError.classList.remove('hidden');
            }
        } catch (error) {
            console.error('OCR Error:', error);
            uploadError.textContent = 'Could not read the image. Please try again.';
            uploadError.classList.remove('hidden');
        } finally {
            screenshotUploadBtn.textContent = 'UPLOAD SCREENSHOT';
            screenshotUploadBtn.disabled = false;
        }
    }

    // --- MASTER FLOW ---
    acceptBtn.addEventListener('click', () => {
        playSound('button');
        rulesOverlay.classList.add('hidden');
        statusUploadOverlay.classList.remove('hidden');
    });

    screenshotUploadBtn.addEventListener('click', () => {
        screenshotUploadInput.click();
    });

    screenshotUploadInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
            verifyScreenshot(file);
        }
    });
});
